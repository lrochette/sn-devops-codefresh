<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_409723_codefresh.CodefreshIntegrationHandler</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Implements extension point sn_devops.DevOpsOrchestrationToolIntegrationHandler
DevOpsOrchestrationToolIntegrationHandler - Endpoint Interface to determine right tool handler</description>
        <name>CodefreshIntegrationHandler</name>
        <script><![CDATA[var CodefreshIntegrationHandler = Class.create();
CodefreshIntegrationHandler.prototype = {

    /*
    Validate if this is the right tool handler for a given tool name.
    */
    handleTool: function(toolName) {
		if (!gs.nil(toolName) && toolName == 'x_409723_codefresh_Codefresh')
            return true;
		return false;
    },

    /*
    Handle the orchestration tool notification event
    */
    handleEvent: function() {
        throw 'Implement handleEvent()';
    },

    /*
    Get the native id for the orchestration task, from stepMapping or changeControl request payloads
    */
    getNativeIdForOrchestrationTask: function(payload) {
		sn_devops.DevOpsLogger.log("CodefreshIntegrationHandler.getNativeIdForOrchestrationTask() payload -> " + JSON.stringify(payload));

		return payload.projectName + "/" + payload.pipelineName + "#" + payload.stageName;
    },

    /*
    Get the native id for the orchestration task, from an orchestration tool notification event payload
    */
    getNativeIdForOrchestrationTaskFromEvent: function() {
        throw 'Implement getNativeIdForOrchestrationTaskFromEvent()';
    },

    /*
    Get the url for the orchestration task, from an orchestration tool notification event payload
    */
    getOrchestrationTaskUrl: function() {
        throw 'Implement getOrchestrationTaskUrl()';
    },

    /*
    Get the native id for the task execution, from an orchestration tool notification event payload
    */
    getNativeIdForTaskExecution: function() {
        throw 'Implement getNativeIdForTaskExecution()';
    },

    /*
    Get the url for the task execution, from an orchestration tool notification event payload
    */
    getTaskExecutionUrl: function() {
        throw 'Implement getTaskExecutionUrl()';
    },

    /*
    Implement what should be done in case the given orchestration task is not under change control
    */
    resumeJob: function() {
        throw 'Implement resumeJob()';
    },

    /*
    Implement the sending of the callback response to the orchestration tool
    */
    notifyWithCallback: function() {
        throw 'Implement notifyWithCallback()';
    },

    /*
    Get the body of the callback response to be sent to the orchestration tool
    */
    getNotifyBodyForOrchTool: function() {
        throw 'Implement getNotifyBodyForOrchTool()';
    },
	
	/*
    Get unique callback glide record
    */
	getCallBack: function() {
		throw 'Implement getCallBack';
	},

    /*
    Perform any transformations to the callback request originated from the orchestration tool
    */
    transformCallbackRequest: function() {
        throw 'Implement transformCallbackRequest()';
    },

    /*
    Implement what should be done to handle the reattempt of callback request when callback record already exists 
    */
    handleCallbackReattempt: function() {
        throw 'Implement handleCallbackReattempt()';
    },
	
	/*
	Return true if stage name includes job name
	*/
	stageNameIncludesJobName: function(){
		return false;
	},

		_getPipelineUrl : function(toolUrl, projectId, projectName, pipelineId, pipelineFullName) {
		var pipelineName = pipelineFullName.substr(pipelineFullName.indexOf('/') +1);
		return toolUrl + "/pipelines/edit/workflow?id= " + pipelineId +
			"&pipeline=" + pipelineName +
			"&projects=" + projectName +
			"&projectId=" + projectId;
	},
	
    processPipelineDiscoveryApiResponse: function(toolUrl, pipelinePayload) {
        var pipelines = [];
        sn_devops.DevOpsLogger.log("CodefreshIntegrationHandler: processPipelineDiscoveryApiResponse -pipelinePayload: " + pipelinePayload);
        var pipelinePayloadObject = JSON.parse(pipelinePayload);
        pipelinePayloadObject.docs.forEach(function(codefreshPipeline) {
			
            var pipeline = {
                name: codefreshPipeline.metadata.name,
                url: this._getPipelineUrl(toolUrl, 
							codefreshPipeline.metadata.projectId, codefreshPipeline.metadata.project,
							codefreshPipeline.metadata.id, codefreshPipeline.metadata.name)
            };
            pipelines.push(pipeline);
        }, this);
        return pipelines;
    },
	
    type: 'CodefreshIntegrationHandler'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-02-04 00:50:33</sys_created_on>
        <sys_id>6c59e7e22f42a41099b5d4a72799b66d</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>CodefreshIntegrationHandler</sys_name>
        <sys_package display_value="Codefresh" source="x_409723_codefresh">7f6f36a02f02201099b5d4a72799b6ff</sys_package>
        <sys_policy/>
        <sys_scope display_value="Codefresh">7f6f36a02f02201099b5d4a72799b6ff</sys_scope>
        <sys_update_name>sys_script_include_6c59e7e22f42a41099b5d4a72799b66d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-02-05 00:22:18</sys_updated_on>
    </sys_script_include>
</record_update>
